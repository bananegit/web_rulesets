# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "Artificial Intelligence/DeepSeek/**"
      - "Artificial Intelligence/Tests/**"
      - "!**/README.md"
    

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: 135
        install-chromedriver: true
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore "Artificial Intelligence/Tests/DeepSeekTests/DeepSeekTests.csproj"
    - name: Build
      run: dotnet build "Artificial Intelligence/Tests/DeepSeekTests/DeepSeekTests.csproj" --no-restore
    - name: Download and install SCP
      shell: pwsh
      env:
        PAT: ${{ secrets.SCP_REPO_PAT }}
      run: |
        Write-Host "Downloading Files for SCP Install"
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/bananegit/scpinstaller/main/scp.z01 -Headers @{Authorization="Token $($env:PAT)"} -OutFile scp.z01
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/bananegit/scpinstaller/main/scp.z02 -Headers @{Authorization="Token $($env:PAT)"} -OutFile scp.z02
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/bananegit/scpinstaller/main/scp.zip -Headers @{Authorization="Token $($env:PAT)"} -OutFile scp.zip
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/bananegit/scpinstaller/main/ca.pem -Headers @{Authorization="Token $($env:PAT)"} -OutFile ca.pem
        Write-Host "Unpacking SCP Bundle"
        7z x .\scp.zip
        Write-Host "Running SCP Installer"
        Start-Process msiexec -ArgumentList "/i ScpInstaller.x64.msi /quiet" -wait
        Write-Host "Copying OPG"
        Copy-Item -Path .\ScpPolicy.opg -Destination "C:\ProgramData\Skyhigh\SCP\Policy\Temp"
        Write-Host "Installing Cert"
        Import-Certificate .\ca.pem -CertStoreLocation Cert:\LocalMachine\Root\ -Confirm:$false
        
    - name: Test
      env:
        dsUsername: ${{ secrets.DSUSERNAME }}
        dsPassword: ${{ secrets.DSPASSWORD }}
      run: dotnet test "Artificial Intelligence/Tests/DeepSeekTests/DeepSeekTests.csproj" --no-build --verbosity normal --logger:nunit
    - name: cat testresults
      if: always()
      shell: pwsh
      run: |
        cat "Artificial Intelligence/Tests/DeepSeekTests/TestResults/TestResults.xml"
